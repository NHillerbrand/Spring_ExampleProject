@startuml
skinparam classAttributeIconSize 0
skinparam componentStyle uml2

' !pragma horizontalLineBetweenDifferentPackageAllowed

package reactor.core.publisher {
    abstract class Mono {
    }
}

package org.springframework {
    package web.reactive.function.server {
        class ServerRequest {
        }
        class ServerResponse {
        }
    }
    package hateoas as springHateoas {
        class EntityModel<E> {
        }
    }
}

package de.hska.kunde {
    package entity {
        class Kunde << entity >> {
        }
    }

    package service {
        class KundeService << service >> {
        }
    }

    package rest #DDDDDD {
        package hateoas #FFFFFF {
            class KundeModelAssembler << @Component >> {
            }
        }
        KundeHandler *-right-> "1" KundeService
        KundeHandler *-down-> "1" KundeModelAssembler
        KundeHandler .down.> Kunde
        KundeHandler .down.> Mono
        KundeHandler .down.> ServerRequest
        KundeHandler .down.> ServerResponse
        KundeHandler .down.> EntityModel

        ' [hidden] fuer nicht-existierende Beziehungen als Workaround fuer das Layout
        KundeModelAssembler -[hidden]-> Kunde
        Kunde -[hidden]-> Mono
        Kunde -[hidden]-> ServerRequest

        class KundeHandler << boundary >> << @Component >> {
            + findById(request: ServerRequest): Mono<ServerResponse>
            + find(request: ServerRequest): Mono<ServerResponse>
            + create(request: ServerRequest): Mono<ServerResponse>
            + update(request: ServerRequest): Mono<ServerResponse>
            + patch(request: ServerRequest): Mono<ServerResponse>
            + deleteById(request: ServerRequest): Mono<ServerResponse>
            + deleteByEmail(request: ServerRequest): Mono<ServerResponse>
        }
    }
}

hide empty members
hide empty methods
hide empty fields

footer (c) Juergen Zimmermann

@enduml
